%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%    conList = getConnectivityList (VTKstruct, indCells)    %%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  'getConnectivityList' retrieves the connectivity list from a 'VTK
%  structure', i.e., get the content of 'VTKstruct.Cells', and returns it
%  in a MxN matrix, where M is the number of cells/elements and N is the
%  number of nodes/points per element.
%   REMARK. This function only will be able to work properly in the case of
%           VTK meshes in which all elements/cells have the same number of
%           nodes/points (vertices).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% INPUTs -------------------------------------------------------------- %
%     VTKstruct  ->  Matlab structure containing all the information
%                    associated to a VTK mesh. It must have been previously
%                    generated by the function 'vtk2structReader' from 'my_VTK_TollBox'.
%     indCells   ->  {OPTIONAL} Indices of those cells/elements whose connectivity list
%                       must be retrieved. If this INPUT is not specified, the whole
%                       connectivity list will be returned.
%                         * IMPORTANT. They must be Matlab indices starting at '1',
%                                      not VTK indices starting at '0'.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% OUTPUTs ------------------------------------------------------------- %
%     conList  ->  MxN matrix containing the connectivity list, where M is the number of the
%                  requested cells/elements and N is the number of nodes/points per element.
%                   * IMPORTANT. 'conList' will contain VTK indices starting at '0',
%                                 not Matlab indices starting at '1'.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% List of functions called from 'getConnectivityList':
%     * All needed functions are native from Matlab
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ----------------------------------------------------------------------- %
%%% AUTHORSHIP %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                       Author:     Alejandro Daniel López Pérez
%                Creation date:     19/05/2016
%       Last modification date:     20/05/2016
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function conList = getConnectivityList (VTKstruct, indCells)

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% LIST OF VARIABLES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   VTKstruct   {INPUT}
%   indCells    {INPUT} [OPTIONAL]
%   conList     {OUTPUT}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% BODY OF THE FUNCTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Check whether 'VTKstruct.Cells' is a cell array
if iscell (VTKstruct.Cells)  % if so
    
    % Check whether 'indCells' was specified as an input
    if nargin > 1      % if so, retrieve the connectivity list only for requested cells/elements
        
        % But first check whether all requested cells/elements have the same number of nodes/points
        if find(diff([VTKstruct.Cells{indCells,1}]),1)  % if NOT
            conList = [];
            warning (' -> getConnectivityList  :::  There are elements/cells with different number of nodes/points among requested ones');
        else  % if so, get the connectivity list
            conList = [VTKstruct.Cells{indCells,2}]';
        end
        
    else  % if NOT, retrieve the whole connectivity list
        
        % But first check whether all cells/elements have the same number of nodes/points (vertices)
        if find(diff([VTKstruct.Cells{:,1}]),1)  % if NOT
            conList = [];
            warning (' -> getConnectivityList  :::  There are elements/cells with different number of nodes/points among the requested ones');
        else  % if so, get the connectivity list
            conList = [VTKstruct.Cells{:,2}]';
        end
        
    end
    
else  % if NOT, it means that 'VTKstruct' contains a surface mesh exclusively made up of triangles
    
    % Check whether 'indCells' was specified as an input
    if nargin > 1  % if so, retrieve the connectivity list only for requested cells/elements 
        conList = VTKstruct.Cells (indCells, :);
    else  % if NOT, retrieve the whole connectivity list
        conList = VTKstruct.Cells;
    end
    
end