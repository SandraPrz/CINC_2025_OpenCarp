
solv_str = cell (4,1);
solv_str{1} = 'dir';
solv_str{2} = 'pcg';
solv_str{3} = 'bicgstab';
solv_str{4} = 'bicgstabl';

tstart_glob = tic;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%  READ TORSO MODEL DATA  %%%
tstart = tic;
fprintf ('\n\t ->  Reading TORSO MODEL data ... \n');

	 ->  Reading TORSO MODEL data ... 
fprintf ('\t\t\t *  Loading .mat file ... \n');
			 *  Loading .mat file ... 
load (dataFile);

% Reordering myocardial nodes for right hand side assemblying
nd_myo = find (torsoNodes.MyoNodes); %#ok<NODEF>
% Renumber myocardial nodes
torsoNodes.MyoNodes = torsoNodes.MyoNodes .* cumsum (torsoNodes.MyoNodes);
fprintf ('\t\t\t *  Done reading and renumberign \n');
			 *  Done reading and renumberign 
fprintf ('\t\t\t *  Elapsed time:   %s \n', executionTime(toc(tstart)));
			 *  Elapsed time:   8 seconds, 203 msec 

% Assembling matrices
tstart = tic;
fprintf ('\n\t ->  Assembling matrices ... \n');

	 ->  Assembling matrices ... 
[K, M, Kright, ~] = assembly (torsoElements, torsoNodes, solver_type, lambda);

			 *  Processing TORSO MODEL. Dimensioning sparse structures for stiffness matrices ... 
					 -  Building neighbor ELEMENTS to NODE graph ... 
							 +  Maximum number of neighbor elements to a node:   114 
							    Minimum number of neighbor elements to a node:   5 
							 +  Elapsed time:   32 seconds, 142 msec 
					 -  Building neighbor NODE to NODE graph ...
							 +  Number of nonzero elements in K:   26678459 
							                     Bandwidth of K:   60 
							 +  Elapsed time:   1 minutes, 11 seconds 

			 *  Processing MYOCARDIAL ELEMENTS. Dimensioning sparse structures for stiffness matrices ...
					 -  Building neighbor ELEMENTS to NODE graph ... 
							 +  Maximum number of neighbor elements to a node:   86 
							    Minimum number of neighbor elements to a node:   1 
							 +  Elapsed time:   11 seconds, 698 msec 
					 -  Building neighbor NODE to NODE graph ...
							 +  Number of nonzero elements in K:   11878168 
							                     Bandwidth of K:   46 
							 +  Elapsed time:   34 seconds, 55 msec 

			 *  Generating stiffness matrices. It could take several minutes ... 
					  10% accomplished.  Elapsed time:  29 seconds, 766 msec 
					  20% accomplished.  Elapsed time:  59 seconds, 376 msec 
					  30% accomplished.  Elapsed time:  1 minutes, 29 seconds 
					  40% accomplished.  Elapsed time:  1 minutes, 58 seconds 
					  50% accomplished.  Elapsed time:  2 minutes, 28 seconds 
					  60% accomplished.  Elapsed time:  2 minutes, 57 seconds 
					  70% accomplished.  Elapsed time:  3 minutes, 26 seconds 
					  80% accomplished.  Elapsed time:  3 minutes, 55 seconds 
					  90% accomplished.  Elapsed time:  4 minutes, 24 seconds 
					 100% accomplished.  Elapsed time:  4 minutes, 52 seconds 
fprintf ('\t\t\t *  Matrices assembled \n');
			 *  Matrices assembled 
fprintf ('\t\t\t *  Elapsed time:   %s \n', executionTime(toc(tstart)));
			 *  Elapsed time:   7 minutes, 28 seconds 

% Preparing for the solution of the system
tstart = tic;
fprintf ('\n\t ->  Initiating solver preprocessing ... \n');

	 ->  Initiating solver preprocessing ... 

% Check specified solver
switch solver_type
    %%% Direct solver (muy caro desde el punto de vista de memoria)
    case 0
        fprintf ('\t\t\t *  Using DIRECT SOLVER \n');
        fprintf ('\t\t\t\t\t -  Regularization ... \n');
        % at this point we impose the constraint that mean(Vo)=0. This condition
        % is equivalent to M*Vo = 0 donde M es la matriz de masa normalizada por
        % el volumen total del torso
        fprintf ('\t\t\t\t\t -  Inverting ... \n');
        Imat = sparse (1:(torsoNodes.NumNodes+1), 1:(torsoNodes.NumNodes+1), ones(torsoNodes.NumNodes+1,1));    %%%  Imat = sparse (1:(nnod_trg+1), 1:(nnod_trg+1), ones(nnod_trg+1,1));
        invK = K\Imat;
        clear K Imat;
        b_length = torsoNodes.NumNodes + 1;
        
% % %         % Generate transfer matrix 'A'
% % %         tic
% % %         fprintf ('\t\t\t\t\t -  Generating transfer matrix ... \n');
% % %         A = zeros (nnod_myo, nnod_trg);
% % %         for i = 1:nnod_myo
% % %             A (i,interpol(i).Id) = interpol(i).alpha;
% % %         end
% % %         A = -Kright * A;
% % %         invKaux = invK (nd_ecg, :);
% % %         Amatrix = invKaux (:, nd_myo) * A;
        
        %%% Save matrices needed to compute torso propagation
        fprintf ('\t\t\t *  Saving matrices in a .mat file \n');
        matricesFile = setNewFileName (dataFolder, 'matricesForDirectSolver.mat');
        save (matricesFile, 'solver_type', 'Kright', 'M', 'invK', 'b_length', 'interpol', 'nd_myo');  %%%% , '-v7.3');
% % %         save (matricesFile, 'solver_type', 'Kright', 'M', 'invK', 'b_length', 'interpol', 'nd_myo', 'nd_ecg', 'Amatrix');
        fprintf ('\t\t\t *  Done. Elapsed time:   %s \n', executionTime(toc(tstart)));
    
    %%% Iterative solver
    case {1,2,3}
        fprintf ('\t\t\t *  Using ITERATIVE SOLVER:  ''%s'' \n', solv_str{solver_type+1});
        fprintf ('\t\t\t\t\t -  Computing preconditioner:  ''%s'' \n', prec_string);
        switch prec_string
            case 'ilu'
                switch type_fact
                    case 'nofill'
                        setup.type = type_fact;
                    case 'ilutp'
                        setup.type = type_fact;
                    case 'crout'
                        setup.type = type_fact;
                    otherwise
                        fprintf ('\t\t\t\t\t -  Specified factorization not defined. Switching to nofill \n')
                        setup.type = 'nofill';
                end
                setup.droptol = droptol;
                [M1, M2] = ilu (K,setup); %#ok<*NASGU,*ASGLU>
            case 'ichol'
                switch type_fact
                    case 'nofill'
                        setup.type = type_fact;
                    case 'ict'
                        setup.type = type_fact;
                    otherwise
                        fprintf ('\t\t\t\t\t -  Specified factorization not defined. Switching to nofill \n')
                        setup.type = 'nofill';
                end
                setup.droptol = droptol;
                M1 = ichol (K, setup);
                M2 = M1';
        end
        fprintf ('\t\t\t\t\t -  Factorization : ''%s'' \n', type_fact);
        fprintf ('\t\t\t\t\t -  Drop tolerance: %e (not used with nofill) \n', droptol);
        b_length = torsoNodes.NumNodes;
        
        %%% Save matrices needed to compute torso propagation
        fprintf ('\t\t\t *  Saving matrices in a .mat file \n');
        matricesFile = setNewFileName (dataFolder, 'matricesForIterativeSolver.mat');
        save (matricesFile, 'solver_type', 'K', 'Kright', 'M', 'M1', 'M2', 'b_length', 'interpol', 'nd_myo', 'prec_string', 'type_fact'); %%% , '-v7.3');
        fprintf ('\t\t\t *  Finished solver preprocessing. Elapsed time:   %s \n', executionTime(toc(tstart)));
end
			 *  Using ITERATIVE SOLVER:  'pcg' 
					 -  Computing preconditioner:  'ichol' 
					 -  Factorization : 'ict' 
					 -  Drop tolerance: 5.000000e-03 (not used with nofill) 
			 *  Saving matrices in a .mat file 
			 *  Finished solver preprocessing. Elapsed time:   34 seconds, 150 msec 

% Final message
fprintf ('\n\t ->  FINISH.  Elapsed time for whole process:   %s \n\n', executionTime(toc(tstart_glob)))

	 ->  FINISH.  Elapsed time for whole process:   8 minutes, 11 seconds 


% Check running mode
if ~isdeployed  % if Matlab session
    % Close log file
    diary;
    diary off;
end
